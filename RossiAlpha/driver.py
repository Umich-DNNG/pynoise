from settings import *
import sys

# The settings object to be referenced.
parameters = Settings()

def plotSettings(plot):
    choice = 'blank'
    print('You are editing settings for a plot. There are many settings '
          + 'for plots - the full list can be found at '
          + 'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html. '
          + 'As such, you can add and remove settings as you wish.')
    print('Choose a following action:')
    print('c - change new or exisitng ' + plot)
    print('d - delete exisiting ' + plot)
    print('v - view the current ' + plot)
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter command: ')
        match choice:
            case 'c':
                add = input('Input the parameter name that you want added/modified: ')
                if parameters.get(plot, add) == None:
                    print('Created parameter ' + add + ' in ' + plot + '.')
                value = input('Input the value of the parameter (make sure '
                              + 'that it in agreement with the correct variable '
                              'type for the parameter): ')
                parameters.set(plot,add,value)
                print('Set paramter ' + add + ' in ' + plot + ' to ' + value +  '.')
            case 'd':
                remove = input('Input the parameter name that you want removed: ')
                if parameters.get(plot, remove) == None:
                    print('Parameter ' + remove + ' is not currently in the settings.')
                else:
                    parameters.remove(plot, remove)
                    print('Removed parameter ' + remove + ' from ' + plot + '.')
            case 'v':
                parameters.print_section(plot)
            case '':
                print('Returning to menu...\n')
            case _:
                print('Unknown input. Use one of the aforementioned commands to select a settings group.')
                print()

def showGroups():
    print('What setting group would you like to edit?')
    print('i - input/output settings')
    print('g - general settings')
    print('v - histogram visual settings')
    print('h - histogram generation settings')
    print('l - line fitting settings')
    print('r - residual plot settings')
    print('Leave the command blank if you wish to return to the previous menu.')

def isFloat(input):
    if input.replace(".", "").isnumeric() and input.count('.') <= 1:
        return True
    else:
        return False

def fileType(input):
    if input == 1:
        return 'single file'
    else:
        return 'folder'

def changeInput():
    file = ''
    while file == '':
        file = input('Enter a file name or absolute path to a folder: ')
        if len(file) == 0:
            print('You must give a file or folder input to run the program.')
        elif file[0] == '/':
            parameters.set('Input/Output Settings','Input type',2)
        else:
            parameters.set('Input/Output Settings','Input type',1)
    parameters.set('Input/Output Settings','Input file/folder',file)
    print('Input ' + file + ' ('
          + fileType(parameters.get('Input/Output Settings','Input type'))
          + ') confirmed. If the autogenerated file type is wrong, you '
          + 'can manually change it in the settings.\n')

def ioSet():
    choice = 'blank'
    print('What setting would you like to edit?')
    print('i - input file/folder')
    print('o - output file')
    print('t - input type')
    print('v - view current Input/Output Settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter setting: ')
        match choice:
            case 'i':
                changeInput()
            case 'o':
                parameters.set('Input/Output Settings','Output file',input('Enter a new output file: '))
                print('Output file changed to ' + parameters.get('Input/Output Settings','Output file'))
            case 'v':
                parameters.print_section('Input/Output Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def genSet():
    choice = 'blank'
    print('What setting would you like to edit?')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('')
    print('v - view current General Settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter setting: ')
        match choice:
            case 'v':
                parameters.print_section('General Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def histSet():
    choice = 'blank'
    print('What setting would you like to edit?')
    print('r - reset time')
    print('b - bin width')
    print('m - minimum cutoff')
    print('v - view current Histogram Generation Settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter setting: ')
        match choice:
            case 'v':
                parameters.print_section('Histogram Generation Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def settingsEditor():
    selection = 'blank'
    showGroups()
    while selection != '':
        selection = input('Enter edit command: ')
        match selection:
            case 'i':
                print()
                ioSet()
                showGroups()
            case 'g':
                print()
                genSet()
                showGroups()
            case 'v':
                print()
                plotSettings('Histogram Visual Settings')
                showGroups()
            case 'h':
                print()
                histSet()
                showGroups()
            case 'l':
                print()
                plotSettings('Line Fitting Settings')
                showGroups()
            case 'r':
                print()
                plotSettings('Residual Plot Settings')
                showGroups()
            case '':
                print('Returning to menu...\n')
                break
            case _:
                print('Unknown input. Use one of the aforementioned commands to select a settings group.')
                print()

def printSelector():
    selection = 'blank'
    print('What settings would you like to view?')
    print('i - input/output settings')
    print('g - general settings')
    print('v - histogram visual settings')
    print('h - histogram generation settings')
    print('l - line fitting settings')
    print('r - residual plot settings')
    print('a - view all settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while selection != '':
        selection = input('Enter print command: ')
        match selection:
            case 'i':
                print()
                parameters.print_section('Input/Output Settings')
                print()
            case 'g':
                print()
                parameters.print_section('General Settings')
                print()
            case 'v':
                parameters.print_section('Histogram Visual Settings')
                print()
            case 'h':
                print()
                parameters.print_section('Histogram Generation Settings')
                print()
            case 'l':
                print()
                parameters.print_section('Line Fitting Settings')
                print()
            case 'r':
                print()
                parameters.print_section('Residual Plot Settings')
                print()
            case 'a':
                parameters.print_all()
                print()
            case '':
                print('Returning to menu...\n')
                break
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')
                print()

def showSetOpt():
    print('What would you like to do with the program settings?')
    print('v - view the current settings')
    print('e - edit the settings')
    print('Leave the command blank if you wish to return to the previous menu.')

def settingsDriver():
    selection = 'blank'
    showSetOpt()
    while (selection != ''):
        selection = input('Enter menu command: ')
        print()
        match selection:
            case 'v':
                printSelector()
                showSetOpt()
            case 'e':
                settingsEditor()
                showSetOpt()
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')

def main():
    selection = 'blank'
    print('Welcome to the DNNG/PyNoise project! With this software we are '
          + 'taking radiation data fission reactions recorded by organic '
          + 'scintillators measuring from fission reactions and applying a '
          + 'line of best fit to the decay rate. Use this Python suite to '
          + 'analyze a single file or multiple across multiple folders.\n')
    print('To begin the program, you must specify an input file or folder.')
    changeInput()
    print('Initializing program with default settings...')
    print('You can utitilze any of the following functions:')
    print('s - view or edit the program settings')
    print('Enter a blank command to end the program.')
    while selection != '':
        input('Enter a command: ')
        match selection:
            case 's':
                settingsDriver()
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')
                print()

if __name__ == "__main__":
    main()
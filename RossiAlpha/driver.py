from settings import *
import sys
import os

# The settings object to be referenced.
parameters = Settings()

def plotSettings(plot):
    choice = 'blank'
    print('You are editing settings for a plot. There are many settings '
          + 'for plots - the full list can be found at '
          + 'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html. '
          + 'As such, you can add and remove settings as you wish.')
    print('Choose a following action:')
    print('c - change new or exisitng ' + plot)
    print('d - delete exisiting ' + plot)
    print('v - view the current ' + plot)
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter command: ')
        match choice:
            case 'c':
                add = input('Input the parameter name that you want added/modified: ')
                if parameters.get(plot, add) == None:
                    print('Created parameter ' + add + ' in ' + plot + '.')
                value = input('Input the value of the parameter (make sure '
                              + 'that it in agreement with the correct variable '
                              'type for the parameter): ')
                parameters.set(plot,add,value)
                parameters.update()
                print('Set paramter ' + add + ' in ' + plot + ' to ' + value +  '.')
            case 'd':
                remove = input('Input the parameter name that you want removed: ')
                if parameters.get(plot, remove) == None:
                    print('Parameter ' + remove + ' is not currently in the settings.')
                else:
                    parameters.remove(plot, remove)
                    print('Removed parameter ' + remove + ' from ' + plot + '.')
                    parameters.update()
            case 'v':
                parameters.print_section(plot)
            case '':
                print('Returning to menu...\n')
            case _:
                print('Unknown input. Use one of the aforementioned commands to select a settings group.')
                print()

def showGroups():
    print('What setting group would you like to edit?')
    print('i - input/output settings')
    print('g - general settings')
    print('v - histogram visual settings')
    print('h - histogram generation settings')
    print('l - line fitting settings')
    print('r - residual plot settings')
    print('d - download settings config from file')
    print('Leave the command blank if you wish to return to the previous menu.')

def isFloat(input):
    if input.replace(".", "").isnumeric() and input.count('.') <= 1:
        return True
    else:
        return False

def fileType(input):
    if input == 1:
        return 'single file'
    else:
        return 'folder'

def changeInput():
    file = ''
    while file == '':
        file = input('Enter a file name or absolute path to a folder: ')
        if len(file) == 0:
            print('You must give a file or folder input to run the program.')
        elif file[0] == '/':
            parameters.set('Input/Output Settings','Input type',2)
        else:
            parameters.set('Input/Output Settings','Input type',1)
    parameters.set('Input/Output Settings','Input file/folder',file)
    parameters.update()
    print('Input ' + file + ' ('
          + fileType(parameters.get('Input/Output Settings','Input type'))
          + ') confirmed. If the autogenerated file type is wrong, you '
          + 'can manually change it in the settings.\n')

def ioSet():
    choice = 'blank'
    print('What setting would you like to edit?')
    print('i - input file/folder')
    print('o - output file')
    print('t - input type')
    print('v - view current Input/Output Settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter setting: ')
        match choice:
            case 'i':
                changeInput()
            case 'o':
                parameters.set('Input/Output Settings','Output file',input('Enter a new output file: '))
                parameters.update()
                print('Output file changed to ' + parameters.get('Input/Output Settings','Output file'))
            case 't':
                value = ''
                print('The input type can be 1 (single file) or 2 (folder). '
                      + 'Please note that this value is automatically assigned '
                      + 'when entering the input file/folder and should only '
                      + 'manually be changed if the autogenerated value is wrong.')
                while value != '1' and value != '2':
                    value = input('Select an input type: ')
                    if value == '1' or value == '2':
                        parameters.set('Input/Output Settings','Input type',int(value))
                        print('Input type changed to ' + value + ' ' + fileType(parameters.get('Input/Output Settings','Input type')))
                        parameters.update()
                    else:
                        print('You must enter 1 or 2 for the file type.')
            case 'v':
                parameters.print_section('Input/Output Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def genSet():
    choice = 'blank'
    while choice != '':
        print('What setting would you like to edit?')
        print('r - fit range')
        print('p - plot scale')
        print('t - time difference method')
        print('d - digital delay')
        print('n - number of folders')
        print('m - meas time per folder')
        print('o - sort data?')
        print('f - save fig?')
        print('w - show plot?')
        print('a - save directory')
        print('v - view current General Settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        choice = input('Enter setting: ')
        match choice:
            case 'r':
                print('TODO')
            case 'p':
                print('TODO')
            case 't':
                selection = 'blank'
                while (selection != '' and selection != 'a' and selection != 'c'
                                       and selection != 'n' and selection != 'd'):
                    print('There are 4 time difference method options:')
                    print('a - any and all')
                    print('c - any and all + cross correlations')
                    print('n - all above options + no repeat')
                    print('d - all above options + digital delay')
                    selection = input('Choose an option, or leave blank to cancel the edit: ')
                    match selection:
                        case 'a':
                            parameters.set('General Settings','Time difference method','any_and_all')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all.')
                        case 'c':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations.')
                        case 'n':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations no_repeat')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations + no repeat.')
                        case 'd':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations no_repeat digital_delay')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations + no repeat + digital delay.')
                        case '':
                            print('Canceling changes...\n')
                        case _:
                            print('Unrecognized command. Please review the list of appriopriate inputs.')
            case 'd':
                print('TODO')
            case 'n':
                selection = ''
                if parameters.get('Input/Output Settings','Input Type') == 1:
                    print('WARNING: You current settings indicate you are only analyzing 1 file. This setting is intended for analyzing multiple folders. If you plan to do so, please update your settings.')
                while not selection.isnumeric():
                    selection = input('Enter the number of folders you want analyzed')
                    if selection.isnumeric():
                        parameters.set('General Settings','Number of folders',int(selection))
                        parameters.update()
            case 'm':
                print('TODO')
            case 'o':
                print('TODO')
            case 'f':
                print('TODO')
            case 'w':
                print('TODO')
            case 'a':
                print('TODO')
            case 'v':
                parameters.print_section('General Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def histSet():
    choice = 'blank'
    print('What setting would you like to edit?')
    print('r - reset time')
    print('b - bin width')
    print('m - minimum cutoff')
    print('v - view current Histogram Generation Settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while choice != '':
        choice = input('Enter setting: ')
        match choice:
            case 'v':
                parameters.print_section('Histogram Generation Settings')
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.')

def settingsEditor():
    selection = 'blank'
    showGroups()
    while selection != '':
        selection = input('Enter edit command: ')
        match selection:
            case 'i':
                print()
                ioSet()
                showGroups()
            case 'g':
                print()
                genSet()
                showGroups()
            case 'v':
                print()
                plotSettings('Histogram Visual Settings')
                showGroups()
            case 'h':
                print()
                histSet()
                showGroups()
            case 'l':
                print()
                plotSettings('Line Fitting Settings')
                showGroups()
            case 'r':
                print()
                plotSettings('Residual Plot Settings')
                showGroups()
            case 'd':
                print()
                importSettings(False)
            case '':
                print('Returning to menu...\n')
                break
            case _:
                print('Unknown input. Use one of the aforementioned commands to select a settings group.')
                print()

def printSelector():
    selection = 'blank'
    print('What settings would you like to view?')
    print('i - input/output settings')
    print('g - general settings')
    print('v - histogram visual settings')
    print('h - histogram generation settings')
    print('l - line fitting settings')
    print('r - residual plot settings')
    print('a - view all settings')
    print('Leave the command blank if you wish to return to the previous menu.')
    while selection != '':
        selection = input('Enter print command: ')
        match selection:
            case 'i':
                print()
                parameters.print_section('Input/Output Settings')
                print()
            case 'g':
                print()
                parameters.print_section('General Settings')
                print()
            case 'v':
                parameters.print_section('Histogram Visual Settings')
                print()
            case 'h':
                print()
                parameters.print_section('Histogram Generation Settings')
                print()
            case 'l':
                print()
                parameters.print_section('Line Fitting Settings')
                print()
            case 'r':
                print()
                parameters.print_section('Residual Plot Settings')
                print()
            case 'a':
                parameters.print_all()
                print()
            case '':
                print('Returning to menu...\n')
                break
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')
                print()

def showSetOpt():
    print('What would you like to do with the program settings?')
    print('v - view the current settings')
    print('e - edit the settings')
    print('Leave the command blank if you wish to return to the previous menu.')

def settingsDriver():
    selection = 'blank'
    showSetOpt()
    while (selection != ''):
        selection = input('Enter menu command: ')
        print()
        match selection:
            case 'v':
                printSelector()
                showSetOpt()
            case 'e':
                settingsEditor()
                showSetOpt()
            case '':
                return
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')

def importSettings(init):
    path = 'blank'
    file = 'blank'
    while not os.path.isfile(path) and (init or file != ''):
        print('Enter the name of the settings file (not including '
            + 'the .set file extension) you want imported.')
        if init:
            file = input('Name of file: ')
        else:
            file = input('Name of file (or blank to cancel): ')
        if file == '' and not init:
            print('Returning to menu...\n')
        else:
            file = file + '.set'
            path = os.path.realpath(__file__)
            path = os.path.join(os.path.dirname(path),file)
            if os.path.isfile(path):
                print('Importing settings from ' + file + '...')
                parameters.read(path)
            else:
                print('It appears the file you selected does not exist. Please try again.\n')
    

def main():
    selection = 'blank'
    print('Welcome to the DNNG/PyNoise project. With this software we are '
          + 'taking radiation data from fission reactions (recorded by organic '
          + 'scintillators) and applying a line of best fit to the decay rate. '
          + 'Use this Python suite to analyze a single file or multiple across '
          + 'numerous folders.\n')
    while selection != 'd' and selection != 'i':
        print('Would you like to use the default settings or import another .set file?')
        print('d - use default settings')
        print('i - import custom settings')
        selection = input('Select settings choice: ')
        match selection:
            case 'd':
                print()
                print('Initializing program with default settings...')
                path = os.path.realpath(__file__)
                path = os.path.join(os.path.dirname(path),'default.set')
                parameters.read(path)
            case 'i':
                print()
                importSettings(True)
                print()
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')
                print()
    print('Settings initialized. You can now begin using the program.\n')
    print('----------------------------------------------------------\n')
    while selection != '':
        print('You can utitilze any of the following functions:')
        print('s - view or edit the program settings')
        print('Enter a blank command to end the program.\n')
        selection = input('Enter a command: ')
        match selection:
            case 's':
                print()
                settingsDriver()
            case '':
                break
            case _:
                print('Unknown input. Use one of the aforementioned commands to edit, view, or approve the settings.')
                print()
    if parameters.updated():
        selection = ''
        while selection != 'd' and selection != 'n' and selection != 'a':
            print('It appears you have made changes to the default '
              + 'settings. Do you want to save your changes?')
            print('d - save current settings as the default')
            print('n - save current settings as a new settings file')
            print('a - abandon current settings')
            selection = input('Select an option: ')
            match selection:
                case 'd':
                    print('This will overwrite the current default settings. Are you sure you want to do this?')
                    choice = input('Enter y to continue and anything else to abort: ')
                    if choice == 'y':
                        path = os.path.realpath(__file__)
                        path = os.path.join(os.path.dirname(path),'default.set')
                        print('Overwriting default settings...')
                        parameters.write(path)
                        print('Default settings overwritten.\n')
                    else:
                        selection = ''
                case 'n':
                    path = 'blank'
                    file = 'blank'
                    while file != '':
                        print('Enter a name for the new settings (not including the .set file extension).')
                        file  = input('Name of file (or blank to cancel): ')
                        file = file + '.set'
                        path = os.path.realpath(__file__)
                        path = os.path.join(os.path.dirname(path),file)
                        if os.path.isfile(path):
                            print('WARNING: settings file ' + file + ' already exists.'
                                  + ' Do you want to overwrite the previous stored settings?')
                            choice = input('Enter y to continue and anything else to abort: ')
                            if choice == 'y':
                                print('Overwriting ' + file + '...')
                                parameters.write(path)
                                print(file + ' overwritten.\n')
                        else:
                            print('Saving current settings to new file ' + file + '...')
                            parameters.write(path)
                            print('Settings saved.')
                case 'a':
                    print('All your current changes will be lost. Are you sure you want to do this?')
                    choice = input('Enter y to continue and anything else to abort: ')
                    if choice == 'y':
                        print('Discarding the current settings...')
                    else:
                        selection = ''
                case _:
                    print('You must choose what to do with your changes.\n')
    print('Thank you for using the DNNG/PyNoise project.')

if __name__ == "__main__":
    main()
import settings as set
import main as mn
import fitting as fit
import plots as plt
import timeDifs as dif
import analyzingFolders as fol
import os
import time

parameters = set.Settings()

os.chdir(os.path.dirname(os.path.realpath(__file__)))

def isFloat(input):

    try:
        float(input)
        return True
    except ValueError:
        return False

def fileType(input):

    if input == 1:
        return 'Single file'
    else:
        return 'Folder'

def plotLink(plot):

    if plot == 'Histogram Visual Settings':
        return 'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html'
    else:
        return 'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html'

def inputBool(group, setting):

    selection = 'blank'
    print()
    while selection != '' and selection != 't' and selection != 'f':
        selection = input('Enter t/f (or leave blank to cancel): ')
        match selection:
            case 't':
                parameters.set(group,setting,True)
                parameters.update()
                print(setting + ' updated to True.\n')
            case 'f':
                parameters.set(group,setting,False)
                parameters.update()
                print(setting + ' updated to False.\n')
            case '':
                print('Canceling changes...\n')
            case _:
                print('This is a true/false question (t/f).\n')

def inputNum(group, setting, type):

    selection = 'blank'
    print()
    while not (type[0] == 'n' and selection.isnumeric()) and not (type[0] == ' ' and isFloat(selection)) and selection != '':
        selection = input('Enter a' + type + ' (or leave blank to cancel): ')
        if type[0] == 'n' and selection.isnumeric():
            parameters.set(group,setting,int(selection))
            parameters.update()
            print(setting + ' updated to ' + selection + '.\n')
        elif type[0] == ' ' and isFloat(selection):
            parameters.set(group,setting,float(selection))
            parameters.update()
            print(setting + ' updated to ' + selection + '.\n')
        elif selection == '':
            print('Canceling changes...\n')
        else:
            print('Please enter a' + type + '.\n')

def changePath(setting):

    file = 'blank'
    name = ''
    while file != '' and file[0] != '/' and file[0] != '.':
        file = input('Enter an absolute or relative path (or leave blank to cancel): ')
        if file == '':
            print('Returning to previous menu...\n')
        elif file[0] == '/' or file [0] == '.':
            if setting[0] == 'I':
                name = file[file.rfind('/')+1:]
                if name.count('.') > 0:
                    parameters.set('Input/Output Settings','Input type',1)
                    if not os.path.isfile(file):
                        print('WARNING: The inputted file does not currently '
                            + 'exist. Ensure it does before running further analysis.')
                else:
                    parameters.set('Input/Output Settings','Input type',2)
                    if not os.path.isdir(file):
                        print('WARNING: The inputted folder does not currently '
                            + 'exist. Ensure it does before running further analysis.')
            else:
                    if not os.path.isdir(file):
                        print('WARNING: The inputted directory does not currently '
                            + 'exist. Ensure it does before running further analysis.')
            file = os.path.abspath(file)
            parameters.set('Input/Output Settings',setting,file)
            parameters.update()
            print(setting + ' changed to ' + parameters.get('Input/Output Settings',setting) + '.')
            if setting[0] == 'I':
                print(fileType(parameters.get('Input/Output Settings','Input type'))
                    + ' input type autogenerated. If this type is wrong, '
                    + 'you can manually change it in the settings.')
            print()
        else:
            print('Your input must be a relative or absolute path (begins with / or ./).\n')

def ioSet():

    choice = 'blank'
    while choice != '':
        print('What setting would you like to edit?')
        print('t - input type')
        print('i - input file/folder')
        print('s - save directory')
        print('v - view current Input/Output Settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        choice = input('Enter setting: ')
        match choice:
            case 'i':
                print()
                changePath('Input file/folder')
            case 's':
                print()
                changePath('Save directory')
            case 't':
                print()
                value = 'blank'
                print('The input type can be 1 (single file) or 2 (folder). '
                      + 'Please note that this value is automatically assigned '
                      + 'when entering the input file/folder and should only '
                      + 'manually be changed if the autogenerated value is wrong.')
                while value != '1' and value != '2' and value != '':
                    value = input('Select an input type: ')
                    if value == '1' or value == '2':
                        parameters.set('Input/Output Settings','Input type',int(value))
                        print(fileType(parameters.get('Input/Output Settings','Input type')), '(' + value + ') set as the input type.')
                        parameters.update()
                    elif value == '':
                        print('Canceling changes...\n')
                    else:
                        print('You must enter 1 or 2 for the file type.')
            case 'v':
                print()
                parameters.print_section('Input/Output Settings')
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def genSet():

    choice = 'blank'
    while choice != '':
        print('What setting would you like to edit?')
        print('r - fit range')
        print('p - plot scale')
        print('t - time difference method')
        print('d - digital delay')
        print('n - number of folders')
        print('m - meas time per folder')
        print('o - sort data?')
        print('f - save fig?')
        print('w - show plot?')
        print('v - view current General Settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        choice = input('Enter setting: ')
        match choice:
            case 'r':
                begin = 0
                end = 0
                selection = 'blank'
                while not isFloat(selection) and selection != '':
                    print('Enter a float value to start the fitting range at.')
                    selection = input ('Value (or blank to cancel the edit): ')
                    if isFloat(selection):
                        begin = float(selection)
                    elif selection != '':
                        print('You must enter a float value.\n')
                if selection != '':
                    selection = 'blank'
                    while not isFloat(selection) and selection != '':
                        print('Enter a float value to end the fitting range at.')
                        selection = input ('Value (or blank to cancel the edit): ')
                        if isFloat(selection):
                            end = float(selection)
                        elif selection != '':
                            print('You must enter a float value.\n')
                    if selection != '':
                        parameters.set('General Settings','Fit range',[begin,end])
                        print('Fit range updated to',parameters.get('General Settings','Fit range'),'\n')
                    else:
                        print('Canceling changes...\n')
                else:
                    print('Canceling changes...\n')
            case 'p':
                selection = input('Enter a new plot scale (or leave blank to cancel): ')
                if selection != '':
                    parameters.set('General Settings','Plot scale',selection)
                    parameters.update()
                    print('Updated the plot scale to ' + selection + '.\n')
                else:
                    print('Canceling changes...\n')
            case 't':
                print()
                selection = 'blank'
                while (selection != '' and selection != 'a' and selection != 'c'
                                       and selection != 'n' and selection != 'd'):
                    print('There are 4 time difference method options:')
                    print('a - any and all')
                    print('c - any and all + cross correlations')
                    print('n - all above options + no repeat')
                    print('d - all above options + digital delay')
                    selection = input('Choose an option, or leave blank to cancel the edit: ')
                    match selection:
                        case 'a':
                            parameters.set('General Settings','Time difference method','any_and_all')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all.\n')
                        case 'c':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations.\n')
                        case 'n':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations no_repeat')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations + no repeat.\n')
                        case 'd':
                            parameters.set('General Settings','Time difference method','any_and_all cross_correlations no_repeat digital_delay')
                            parameters.update()
                            print('Successfully updated the time difference method to any and all + cross correlations + no repeat + digital delay.\n')
                        case '':
                            print('Canceling changes...\n')
                        case _:
                            print('Unrecognized command. Please review the list of appriopriate inputs.\n')
            case 'd':
                inputNum('General Settings','Digital delay','n integer')
            case 'n':
                if parameters.get('Input/Output Settings','Input Type') == 1:
                    print('WARNING: You current settings indicate you are only analyzing 1 '
                          + 'file. This setting is intended for analyzing multiple folders. '
                          + 'If you plan to do so, please update your settings.')
                inputNum('General Settings','Number of folders','n integer')
            case 'm':
                inputNum('General Settings','Meas time per folder','n integer')
            case 'o':
                inputBool('General Settings','Sort data?')
            case 'f':
                inputBool('General Settings','Save figures?')
            case 'w':
                inputBool('General Settings','Show plots?')
            case 'v':
                print()
                parameters.print_section('General Settings')
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def histSet():
    choice = 'blank'
    while choice != '':
        print('What setting would you like to edit?')
        print('r - reset time')
        print('b - bin width')
        print('m - minimum cutoff')
        print('v - view current Histogram Generation Settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        choice = input('Enter setting: ')
        match choice:
            case 'r':
                inputNum('Histogram Generation Settings','Reset time',' float')
            case 'b':
                inputNum('Histogram Generation Settings','Bin width','n integer')
            case 'm':
                inputNum('Histogram Generation Settings','Minimum cutoff','n integer')
            case 'v':
                print()
                parameters.print_section('Histogram Generation Settings')
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def plotSet(plot):

    choice = 'blank'
    print('You are editing settings for a plot. There are many '
          + 'settings for plots - the full list for', plot, 
          'can be found at:\n', plotLink(plot),'\nAs such, '
          + 'you can add and remove settings as you wish.\n')
    while choice != '':
        print('Choose a following action:')
        print('c - change new or exisitng ' + plot)
        print('d - delete exisiting ' + plot)
        print('v - view the current ' + plot)
        print('Leave the command blank if you wish to return to the previous menu.')
        choice = input('Enter command: ')
        match choice:
            case 'c':
                print()
                setting = input('Input the parameter name that you want added/modified (or leave blank to cancel): ')
                if setting != '':
                    if parameters.get(plot, setting) == None:
                        print('Created parameter ' + setting + ' in ' + plot + '.')
                    value = input('Input the value of the parameter (or leave blank to cancel): ')
                    if value != '':
                        if value == 'True':
                            parameters.set(plot,setting,True)
                        elif value == 'False':
                            parameters.set(plot,setting,False)
                        elif value.isnumeric():
                            parameters.set(plot,setting,int(value))
                        elif isFloat(value):
                            parameters.set(plot,setting,float(value))
                        else:
                            parameters.set(plot,setting,value)
                        parameters.update()
                        print('Set paramter ' + setting + ' in ' + plot + ' to ' + value +  '.\n')
                    else:
                        print('Cancelling changes...\n')
                else:
                    print('Cancelling changes...\n')
            case 'd':
                print()
                remove = ' '
                while remove != '':
                    remove = input('Input the parameter name that you want removed (or leave blank to cancel): ')
                    if remove == '':
                        print('Cancelling changes...\n')
                    elif parameters.get(plot, remove) == None:
                        print('Parameter ' + remove + ' is not currently in the settings.\n')
                    else:
                        parameters.remove(plot, remove)
                        parameters.update()
                        print('Removed parameter ' + remove + ' from ' + plot + '.\n')
                        remove = ''
            case 'v':
                print()
                parameters.print_section(plot)
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def settingsEditor():

    selection = 'blank'
    while selection != '':
        print('What setting group would you like to edit?')
        print('i - input/output settings')
        print('g - general settings')
        print('v - histogram visual settings')
        print('h - histogram generation settings')
        print('l - line fitting settings')
        print('r - residual plot settings')
        print('d - download settings config from file')
        print('Leave the command blank if you wish to return to the previous menu.')
        selection = input('Enter edit command: ')
        match selection:
            case 'i':
                print()
                ioSet()
            case 'g':
                print()
                genSet()
            case 'v':
                print()
                plotSet('Histogram Visual Settings')
            case 'h':
                print()
                histSet()
            case 'l':
                print()
                plotSet('Line Fitting Settings')
            case 'r':
                print()
                plotSet('Residual Plot Settings')
            case 'd':
                print()
                importSettings(False)
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def printSelector():

    selection = 'blank'
    while selection != '':
        print('What settings would you like to view?')
        print('i - input/output settings')
        print('g - general settings')
        print('v - histogram visual settings')
        print('h - histogram generation settings')
        print('l - line fitting settings')
        print('r - residual plot settings')
        print('a - view all settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        selection = input('Enter print command: ')
        match selection:
            case 'i':
                print()
                parameters.print_section('Input/Output Settings')
                print()
            case 'g':
                print()
                parameters.print_section('General Settings')
                print()
            case 'v':
                print()
                parameters.print_section('Histogram Visual Settings')
                print()
            case 'h':
                print()
                parameters.print_section('Histogram Generation Settings')
                print()
            case 'l':
                print()
                parameters.print_section('Line Fitting Settings')
                print()
            case 'r':
                print()
                parameters.print_section('Residual Plot Settings')
                print()
            case 'a':
                parameters.print_all()
                print()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def settingsDriver():

    selection = 'blank'
    while (selection != ''):
        print('What would you like to do with the program settings?')
        print('v - view the current settings')
        print('e - edit the settings')
        print('Leave the command blank if you wish to return to the previous menu.')
        selection = input('Enter menu command: ')
        match selection:
            case 'v':
                print()
                printSelector()
            case 'e':
                print()
                settingsEditor()
            case '':
                print('Returning to previous menu...\n')
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')

def importSettings(init):

    path = 'blank'
    file = 'blank'
    while not os.path.isfile(path) and (init or file != ''):
        print('Enter the name of the settings file (not including '
            + 'the .set file extension) you want imported.')
        if init:
            file = input('Name of file: ')
        else:
            file = input('Name of file (or blank to cancel): ')
        if file == '' and not init:
            print('Returning to previous menu...\n')
        else:
            file = file + '.set'
            path = os.path.abspath(file)
            if os.path.isfile(path):
                print('Importing settings from ' + file + '...')
                parameters.read(path)
                print('Settings from ' + file + ' succesfully imported.\n')
            else:
                print('It appears the file you selected does not exist. Please try again.\n')
    

def main():

    selection = 'blank'
    print('Welcome to the DNNG/PyNoise project. With this software we are '
          + 'taking radiation data from fission reactions (recorded by organic '
          + 'scintillators) and applying a line of best fit to the decay rate. '
          + 'Use this Python suite to analyze a single file or multiple across '
          + 'numerous folders.\n')
    while selection != 'd' and selection != 'i':
        print('Would you like to use the default settings or import another .set file?')
        print('d - use default settings')
        print('i - import custom settings')
        selection = input('Select settings choice: ')
        match selection:
            case 'd':
                print()
                print('Initializing program with default settings...')
                path = os.path.abspath('default.set')
                parameters.read(path)
            case 'i':
                print()
                importSettings(True)
            case _:
                print('You must choose what settings to import.\n')
    print('Settings initialized. You can now begin using the program.\n')
    print('----------------------------------------------------------\n')
    while selection != '':
        print('You can utitilze any of the following functions:')
        print('m - run the entire program through the main driver')
        print('t - calculate time differences')
        print('p - create plots of the time difference data')
        print('f - fit the data to an exponential curve')
        print('s - view or edit the program settings')
        print('Leave the command blank to end the program.')
        selection = input('Enter a command: ')
        match selection:
            case 'm':
                if parameters.get('Input/Output Settings','Input type') == 1:
                    mn.analyzeAllType1(parameters.settings)
                elif parameters.get('Input/Output Settings','Input type') == 2:
                    mn.analyzeAllType2(parameters.settings)
                else:
                    print('ERROR: No input file/folder defined. Please edit the settings.')
                print('TODO: Add user interactions here, print statements, options, etc.\n')
            case 't':
                print('TODO: Run timeDifs.py accordingly\n')
            case 'p':
                print('TODO: Run plots.py accordingly\n')
            case 'f':
                print('TODO: Run fitting.py accordingly\n')
            case 's':
                print()
                settingsDriver()
            case '':
                print('\nAre you sure you want to quit the program?')
                choice = input('Enter q to quit and anything else to abort: ')
                if choice == 'q':
                    print('Ending program...\n')
                else:
                    print('Quit aborted.\n')
                    selection = 'blank'
            case _:
                print('Unrecognized command. Please review the list of appriopriate inputs.\n')
    if parameters.updated():
        selection = ''
        while selection != 'd' and selection != 'n' and selection != 'a':
            print('It appears you have made changes to the default '
              + 'settings. Do you want to save your changes?')
            print('d - save current settings as the default')
            print('n - save current settings as a new settings file')
            print('a - abandon current settings')
            selection = input('Select an option: ')
            match selection:
                case 'd':
                    print('This will overwrite the current default settings. Are you sure you want to do this?')
                    choice = input('Enter y to continue and anything else to abort: ')
                    if choice == 'y':
                        path = os.path.abspath('default.set')
                        print('Overwriting default settings...')
                        parameters.write(path, True)
                        print('Default settings overwritten.\n')
                    else:
                        print()
                        selection = ''
                case 'n':
                    path = 'blank'
                    file = 'blank'
                    while file != '' and not os.path.isfile(path):
                        print('Enter a name for the new settings (not including the .set file extension).')
                        file  = input('Name of file (or blank to cancel): ')
                        if file != '':
                            file = file + '.set'
                            path = os.path.abspath(file)
                            if os.path.isfile(path):
                                print('WARNING: settings file ' + file + ' already exists.'
                                    + ' Do you want to overwrite the previous stored settings?')
                                choice = input('Enter y to continue and anything else to abort: ')
                                if choice == 'y':
                                    print('Overwriting ' + file + '...')
                                    parameters.write(path, False)
                                    print('Settings in ' + file + ' overwritten.\n')
                                else:
                                    print()
                                    path = 'blank'
                            else:
                                print('Saving current settings to new file ' + file + '...')
                                parameters.write(path, False)
                                print('Settings saved.\n')
                        else:
                            print()
                            selection = ''
                case 'a':
                    print('WARNING: all your current changes will be lost. Are you sure you want to do this?')
                    choice = input('Enter y to continue and anything else to abort: ')
                    if choice == 'y':
                        print('Discarded the current settings.\n')
                    else:
                        print()
                        selection = ''
                case _:
                    print('You must choose what to do with your changes.\n')
    print('Thank you for using the DNNG/PyNoise project.')

if __name__ == "__main__":
    main()